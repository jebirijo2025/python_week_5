# Parent class
class Device:
    def __init__(self, brand, model):   #  Fixed: __init_
        self.brand = brand
        self.model = model

    def device_info(self):
        return f"Device: {self.brand} {self.model}"

# Child class inheriting from Device
class Smartphone(Device):
    def __init__(self, brand, model, storage, battery):   #  Fixed: __init_
        super().__init__(brand, model)  #  Call parent constructor correctly
        self.storage = storage
        self.battery = battery
        self.__is_locked = True  # Encapsulated attribute (private)

    # Method to unlock the phone
    def unlock(self, pin):
        if pin == "1234":
            self.__is_locked = False
            return "Phone unlocked "
        else:
            return "Incorrect PIN "

    # Method to install an app
    def install_app(self, app_name):
        if self.__is_locked:
            return "Unlock the phone first "
        else:
            return f"Installing {app_name}..."

    # Polymorphic method (can be overridden in future classes)
    def device_info(self):
        return f"Smartphone: {self.brand} {self.model}, {self.storage}GB, {self.battery}mAh"

# Create objects
phone1 = Smartphone("Samsung", "Galaxy S24", 256, 5000)
phone2 = Smartphone("Apple", "iPhone 15", 128, 4200)

# Test methods
print(phone1.device_info())
print(phone1.unlock("0000"))
print(phone1.unlock("1234"))
print(phone1.install_app("WhatsApp"))
